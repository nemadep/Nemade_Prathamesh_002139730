/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.RestaurantAdminRole;

import Business.EcoSystem;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JSplitPane;

/**
 *
 * @author prathameshnemade
 */
public class RestaurantOrderStatusJPanel extends javax.swing.JPanel {

    EcoSystem system;
    UserAccount account;
    JSplitPane jSplitPane;
    Integer selectedIndex;
    OrderWorkRequest selectedWorkRequest;
    ArrayList<OrderWorkRequest> unAssignedRequests = new ArrayList<OrderWorkRequest>();

    RestaurantOrderStatusJPanel(EcoSystem system, UserAccount account, JSplitPane jSplitPane) {
        this.system = system;
        this.account = account;
        this.jSplitPane = jSplitPane;
        initComponents();
        _getUnAssignedOrders();
    }

    public void _getUnAssignedOrders() {
        DefaultListModel model = new DefaultListModel();
        this.ordersJList.setModel(model);

        for (int i = 0; i < this.system.getWorkQueue().getWorkRequestList().size(); i++) {
            WorkRequest ongoing = this.system.getWorkQueue().getWorkRequestList().get(i);
            if (ongoing instanceof OrderWorkRequest) {
                OrderWorkRequest onGo = (OrderWorkRequest) ongoing;
                if (onGo.getSender().getManagerUserName().toString().equals(this.account.getUsername().toString())) {
                    String resName = ongoing.getSender().getName();
                    Long resWorkId = ((OrderWorkRequest) ongoing).getOrderWorkRequestId();
                    model.addElement(String.valueOf(resWorkId) + " - " + resName);
                    unAssignedRequests.add((OrderWorkRequest) ongoing);
                }
            }
        }
        this.ordersJList.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ordersJList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        orderStatusJComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        addJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        ordersJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ordersJListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ordersJList);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Orders:");

        orderStatusJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "INPROGRESS", "READYFORPICKUP", "CANCELLED" }));
        orderStatusJComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                orderStatusJComboBoxItemStateChanged(evt);
            }
        });
        orderStatusJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderStatusJComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Order Status:");

        addJButton.setBackground(new java.awt.Color(200, 203, 178));
        addJButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        addJButton.setForeground(new java.awt.Color(67, 100, 100));
        addJButton.setText("DONE");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Change Order Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderStatusJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orderStatusJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(141, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ordersJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ordersJListValueChanged
        openSelectedOrder();
    }//GEN-LAST:event_ordersJListValueChanged

    public void openSelectedOrder() {
        selectedIndex = this.orderStatusJComboBox.getSelectedIndex();
        if (selectedIndex != -1) {
            this.selectedWorkRequest = unAssignedRequests.get(selectedIndex);
        }
    }

    private void orderStatusJComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_orderStatusJComboBoxItemStateChanged
//todo
    }//GEN-LAST:event_orderStatusJComboBoxItemStateChanged

    private void orderStatusJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderStatusJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderStatusJComboBoxActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
//        for (int i = 0; i < this.system.getWorkQueue().getWorkRequestList().size(); i++) {
//            WorkRequest ongoing = this.system.getWorkQueue().getWorkRequestList().get(i);
//            if (ongoing instanceof OrderWorkRequest) {
//                OrderWorkRequest onGo = (OrderWorkRequest) ongoing;
//                if (onGo == selectedWorkRequest) {
//                    onGo.setOrderRequestStatus("ASSIGNED");
//
//                    _getUnAssignedOrders();
//                    System.out.println("this.selectedDel----" + this.selectedDel.getUsername());
//                    OrderAssignmentRequest orderAssignment = new OrderAssignmentRequest(
//                        onGo.getAddress(),
//                        onGo.getReceiver(),
//                        onGo.getOrderedMenu(),
//                        onGo.getSender(),
//                        onGo.getMessage(),
//                        onGo.getStatus(),
//                        onGo.getRequestDate(),
//                        this.selectedDel,
//                        new Date(),
//                        this.orderMEssageJTextArea.getText(),
//                        "READYTOPICKUP",
//                        Integer.valueOf(this.bagsJField.getText()),
//                        this.yesJCheckBox.isSelected(),
//                        onGo.getOrderWorkRequestId()
//                    );
//                    this.system.getWorkQueue().getWorkRequestList().add(orderAssignment);
//                    JOptionPane.showMessageDialog(this, "Order Assigned Successfully!", "Order Assignment Details", INFORMATION_MESSAGE);
//                }
//            }
//        }
    }//GEN-LAST:event_addJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> orderStatusJComboBox;
    private javax.swing.JList<String> ordersJList;
    // End of variables declaration//GEN-END:variables
}
